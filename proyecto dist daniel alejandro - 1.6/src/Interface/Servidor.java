/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import cliente.cliente;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import servidor.servidor;
/**
 *
 * @author JASO VAIO
 */
public class Servidor extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    private int puerto;
    private servidor server;
    private DefaultListModel listModel ;
    
    private List<cliente> serversConnectedTo  = new ArrayList<cliente>();
   
    public void fill_peers(){
        this.peers.removeAllItems();
        for (int i = 55000; i < 55100; i++) {
            
            try {
                new ServerSocket(i).close();
            } catch (IOException ex) {
                if (i!= this.getServer().getPuerto()){
                    this.peers.addItem(String.valueOf(i));
                }
            }
             catch (Exception e) {
                System.out.println("Excepcion: " + e.getMessage());
            }
        }
        puerto = server.getPuerto();
        this.setTitle("Servidor "+Integer.toString(puerto));
    
    }
    
    public void inicializar(){
        jerror.setVisible(false);
       
    }
    
    public Servidor() {
        this.setServer(new servidor(55001));
        this.getServer().start();
        initComponents();
        this.fill_peers();
        this.listModel =  new DefaultListModel();
        this.servers_connected_to.setModel(listModel);
        this.servers_connected_to.setVisible(false);
        this.jLabel2.setVisible(false);
        Servidor aux = this;
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {     
                System.out.println("prueba");    
                for (int i = 0; i < serversConnectedTo.size(); i++) {
                    serversConnectedTo.get(i).logout();
                }
                try {
                    
                    aux.getServer().getServer().close();
                } catch (IOException ex) {
                    System.out.println("Excepcion: " + ex.getMessage());
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.exit(0);
            }
        });
        jerror.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peers = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        connect = new javax.swing.JButton();
        reload = new javax.swing.JButton();
        jerror = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        servers_connected_to = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        peers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peersActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione peer");

        connect.setText("Conectar");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        reload.setText("Reload");
        reload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadActionPerformed(evt);
            }
        });

        jerror.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jerror.setForeground(new java.awt.Color(255, 0, 0));
        jerror.setText("No es posible realizar la conexion");

        jScrollPane1.setViewportView(servers_connected_to);

        jLabel2.setText("Server conectados");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(connect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(reload)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jerror, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(connect)
                    .addComponent(reload))
                .addGap(45, 45, 45)
                .addComponent(jerror, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void peersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peersActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_peersActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        // TODO add your handling code here:
        try {
            cliente clienteAux =  new cliente(Integer.parseInt(this.peers.getSelectedItem().toString()));
            this.serversConnectedTo.add(clienteAux);
            this.listModel.addElement(this.peers.getSelectedItem().toString());
            this.jLabel2.setVisible(true);
            this.servers_connected_to.setVisible(true);
            clienteAux.run();
            inicializar();
        } catch (Exception e) {
            System.out.println("No es posible conectar");
            jerror.setVisible(true);
        }
        
    }//GEN-LAST:event_connectActionPerformed

    private void reloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadActionPerformed
        // TODO add your handling code here:
         this.fill_peers();
    }//GEN-LAST:event_reloadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jerror;
    private javax.swing.JComboBox<String> peers;
    private javax.swing.JButton reload;
    private javax.swing.JList<String> servers_connected_to;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the server
     */
    public servidor getServer() {
        return server;
    }

    /**
     * @param server the server to set
     */
    public void setServer(servidor server) {
        this.server = server;
    }

    /**
     * @return the serversConnectedTo
     */
    public List<cliente> getServersConnectedTo() {
        return serversConnectedTo;
    }

    /**
     * @param serversConnectedTo the serversConnectedTo to set
     */
    public void setServersConnectedTo(List<cliente> serversConnectedTo) {
        this.serversConnectedTo = serversConnectedTo;
    }
}
